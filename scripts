
>>>> GetGitBranches
import org.jenkinsci.plugins.envinject.service.EnvInjectGlobalPasswordRetriever

// Récupération des paramètres depuis la configuration globale
def technicalLdapPassword = new EnvInjectGlobalPasswordRetriever().getGlobalPasswords().find{it.name == 'technicalLdapPassword'}.value
// Combinaison du spread operator et suppression des valeurs null pour éviter l'itération sur des tableaux
def technicalLdapUser = (jenkins.globalNodeProperties*.envVars.technicalLdapUser - null)[0]
def servicesUrlSuffix = (jenkins.globalNodeProperties*.envVars.servicesUrlSuffix - null)[0]

// Récupération des branches et tags par utilisation de "git ls-remote"
def process = ['git', 'ls-remote', '--heads', "http://$technicalLdapUser:$technicalLdapPassword@restricted-scm-cis$servicesUrlSuffix/${applicationId}.git"].execute()
process.waitForOrKill(60000)

def branches = process.in.readLines().collect{ it.replaceFirst(~/[0-9a-f]+\s+refs\/heads\//, '') }.sort()
if (branches.remove('develop')) branches.add(0, 'develop') // Move develop at the top of the list
if (branches.remove('master')) branches.add(0, 'master') // Then move master at the top of the list

return branches

>>>> GetGitTags

import org.jenkinsci.plugins.envinject.service.EnvInjectGlobalPasswordRetriever

// Récupération des paramètres depuis la configuration globale
def technicalLdapPassword = new EnvInjectGlobalPasswordRetriever().getGlobalPasswords().find{it.name == 'technicalLdapPassword'}.value
// Combinaison du spread operator et suppression des valeurs null pour éviter l'itération sur des tableaux
def technicalLdapUser = (jenkins.globalNodeProperties*.envVars.technicalLdapUser - null)[0]
def servicesUrlSuffix = (jenkins.globalNodeProperties*.envVars.servicesUrlSuffix - null)[0]

// Récupération des branches et tags par utilisation de "git ls-remote"
def process = ['git', 'ls-remote', '--tags', "http://$technicalLdapUser:$technicalLdapPassword@restricted-scm-cis$servicesUrlSuffix/${applicationId}.git"].execute()
process.waitForOrKill(60000)
return process.in.readLines().collect{ it.replaceFirst(~/[0-9a-f]+\s+refs\/tags\//, '') }.findAll{ !it.endsWith('^{}') }.sort().reverse()


>>>> Extensible choice param config 

<scriptText>
// TODO : Utiliser le paramètre Git branch/tag parameter après avoir mis à jour le core et le plugin Git def 
shell = new GroovyShell(getClass().getClassLoader(), binding) 
shell.setVariable('applicationId', '@@APPLICATION_ID@@') 

// Get Jenkins master JENKINS_HOME value because this script is executed on it 
def jenkinsHome = System.getProperty('JENKINS_HOME') 
shell.evaluate(new File("$jenkinsHome/job-resources/groovy/GetGitBranches.groovy"))
</scriptText>

